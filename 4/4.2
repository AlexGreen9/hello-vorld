#include <stdio.h>
#include <stdlib.h>

#define MAX_PRIORITY 255

typedef struct QueueElement {
    int data;
    int priority;
    struct QueueElement* next;
} QueueElement;

QueueElement* front = NULL;
QueueElement* rear = NULL;

void enqueue(int data, int priority) {
    QueueElement* newElement = (QueueElement*)malloc(sizeof(QueueElement));
    newElement->data = data;
    newElement->priority = priority;
    newElement->next = NULL;

    if (front == NULL || priority > front->priority) {
        newElement->next = front;
        front = newElement;
    } else {
        QueueElement* current = front;
        while (current->next != NULL && current->next->priority >= priority) {
            current = current->next;
        }
        newElement->next = current->next;
        current->next = newElement;
    }

    if (rear == NULL) {
        rear = newElement;
    }
}

int dequeue() {
    if (front == NULL) {
        printf("Queue is empty\n");
        return -1;
    }

    QueueElement* temp = front;
    int data = temp->data;
    front = front->next;
    if (front == NULL) {
        rear = NULL;
    }
    free(temp);
    return data;
}

void displayQueue() {
    QueueElement* current = front;
    while (current != NULL) {
        printf("Data: %d, Priority: %d\n", current->data, current->priority);
        current = current->next;
    }
}

int main() {
    enqueue(1, 100);
    enqueue(2, 50);
    enqueue(3, 150);

    printf("Queue before dequeue:\n");
    displayQueue();

    printf("\nDequeue: %d\n", dequeue());

    printf("\nQueue after dequeue:\n");
    displayQueue();

    return 0;
}
